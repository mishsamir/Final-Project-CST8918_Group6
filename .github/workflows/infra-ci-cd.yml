name: Terraform CI-CD
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

#Special permissions required for OIDC authentication
permissions:
  id-token: write
  contents: read
  pull-requests: write

#These environment variables are used by the terraform azure provider to setup OIDD authenticate. 
env:
  ARM_CLIENT_ID: "${{ secrets.AZURE_CLIENT_ID }}"
  ARM_SUBSCRIPTION_ID: "${{ secrets.AZURE_SUBSCRIPTION_ID }}"
  ARM_TENANT_ID: "${{ secrets.AZURE_TENANT_ID }}"
  ARM_ACCESS_KEY: "${{ secrets.ARM_ACCESS_KEY }}"

defaults:
  run:
    working-directory: ./infra  
  
jobs:
  tflint:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      name: Checkout source code

    - uses: actions/cache@v4
      name: Cache plugin dir
      with:
        path: ~/.tflint.d/plugins
        key: tflint-${{ hashFiles('.tflint.hcl') }}

    - uses: terraform-linters/setup-tflint@v4
      name: Setup TFLint
      with:
        tflint_version: latest

    - name: Show version
      run: tflint --version

    - name: Init TFLint
      run: tflint --init
      env:
        # https://github.com/terraform-linters/tflint/blob/master/docs/user-guide/plugins.md#avoiding-rate-limiting
        GITHUB_TOKEN: ${{ github.token }}

    - name: Run TFLint
      id: tflint
      run: tflint -f compact
  
  terraform-plan:
    name: 'Terraform Plan'
    runs-on: ubuntu-latest
    env:
      #this is needed since we are running terraform with read-only permissions
      ARM_SKIP_PROVIDER_REGISTRATION: true
      ARM_USE_OIDC: true
    outputs:
      tfplanExitCode: ${{ steps.tf-plan.outputs.exitcode }}

    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v4

      # Install the latest version of the Terraform CLI
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false

      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        run: terraform init

      # Force unlock any existing locks with comprehensive error handling
      - name: Force Unlock State (Enhanced)
        run: |
          echo "Checking for and clearing any existing state locks..."
          
          # Function to extract lock ID from terraform output
          get_lock_id() {
            local output="$1"
            echo "$output" | grep -o "ID: *[a-f0-9-]*" | cut -d' ' -f2 | head -1
          }
          
          # Try to detect if state is locked by running a quick plan
          echo "Testing state access..."
          LOCK_CHECK_OUTPUT=""
          if ! timeout 10s terraform plan -detailed-exitcode -no-color -lock-timeout=2s > /dev/null 2>&1; then
            echo "State appears to be locked, attempting to get lock info..."
            
            # Capture the lock error output
            LOCK_CHECK_OUTPUT=$(timeout 10s terraform plan -detailed-exitcode -no-color -lock-timeout=1s 2>&1 || true)
            
            # Extract lock ID
            LOCK_ID=$(get_lock_id "$LOCK_CHECK_OUTPUT")
            
            if [ ! -z "$LOCK_ID" ] && [ "$LOCK_ID" != "ID:" ]; then
              echo "Found lock ID: $LOCK_ID"
              echo "Attempting to force unlock..."
              
              # Multiple unlock attempts with different methods
              for attempt in 1 2 3; do
                echo "Unlock attempt $attempt/3..."
                
                if echo "yes" | terraform force-unlock "$LOCK_ID" 2>/dev/null; then
                  echo "Successfully unlocked state lock: $LOCK_ID"
                  break
                elif [ $attempt -eq 3 ]; then
                  echo "Failed to unlock after 3 attempts, but continuing..."
                  echo "Lock ID: $LOCK_ID"
                  echo "Lock info: $LOCK_CHECK_OUTPUT"
                else
                  echo " Unlock attempt $attempt failed, waiting 5 seconds..."
                  sleep 5
                fi
              done
            else
              echo " No lock ID found or lock may have cleared itself"
            fi
          else
            echo "State is accessible, no locks detected"
          fi
          
          echo " Lock check completed, proceeding with workflow..."
        continue-on-error: true

      # Checks that all Terraform configuration files adhere to a canonical format
      # Will fail the build if not
      - name: Terraform Format
        run: terraform fmt -check

      # Generates an execution plan for Terraform with enhanced lock handling
      # An exit code of 0 indicated no changes, 1 a terraform failure, 2 there are pending changes.
      - name: Terraform Plan
        id: tf-plan
        run: |
          export exitcode=0
          echo "Starting Terraform Plan with enhanced lock timeout..."
          terraform plan -detailed-exitcode -no-color -out tfplan -lock-timeout=15m || export exitcode=$?

          echo "exitcode=$exitcode" >> $GITHUB_OUTPUT
          
          if [ $exitcode -eq 1 ]; then
            echo "Terraform Plan Failed!"
            exit 1
          else 
            exit 0
          fi
          
      # Save plan to artifacts  
      - name: Publish Terraform Plan
        uses: actions/upload-artifact@v4
        with:
          name: tfplan
          path: tfplan
          
      # Create string output of Terraform Plan
      - name: Create String Output
        id: tf-plan-string
        run: |
          TERRAFORM_PLAN=$(terraform show -no-color tfplan)
          
          delimiter="$(openssl rand -hex 8)"
          echo "summary<<${delimiter}" >> $GITHUB_OUTPUT
          echo "## Terraform Plan Output" >> $GITHUB_OUTPUT
          echo "<details><summary>Click to expand</summary>" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo '```terraform' >> $GITHUB_OUTPUT
          echo "$TERRAFORM_PLAN" >> $GITHUB_OUTPUT
          echo '```' >> $GITHUB_OUTPUT
          echo "</details>" >> $GITHUB_OUTPUT
          echo "${delimiter}" >> $GITHUB_OUTPUT
          
      # Publish Terraform Plan as task summary
      - name: Publish Terraform Plan to Task Summary
        env:
          SUMMARY: ${{ steps.tf-plan-string.outputs.summary }}
        run: |
          echo "$SUMMARY" >> $GITHUB_STEP_SUMMARY
        
      # If this is a PR post the changes
      - name: Push Terraform Output to PR
        if: github.ref != 'refs/heads/main'
        uses: actions/github-script@v7
        env:
          SUMMARY: "${{ steps.tf-plan-string.outputs.summary }}"
        with:
            github-token: ${{ secrets.GITHUB_TOKEN }}
            script: |
              const body = `${process.env.SUMMARY}`;
              github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: body
              })